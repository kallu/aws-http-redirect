{# 
   This is Jinja2 template that will generate Cloudformation YAML for ALB/GA HTTP 301 redirection service.
   Configuration is in http301-conf.yaml

   Install Jinja CLI

   % pip install jinja-cli

   then render Cloudformation template

   % jinja -d http301-conf.yaml http301-template.yaml.j2
#}

AWSTemplateFormatVersion: 2010-09-09
Description: |
  Serverless HTTP 301 redirector

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Network configuration
        Parameters:
          - VPC
          - Subnets
          - CertId
          - AllowAccessCIDR

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC for deployment

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets within above VPC (min 2)

  AllowAccessCIDR:
    Type: String
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){1}$"
    Description: CIDR allowed for HTTP(S) access
    Default: 0.0.0.0/0

  CertId:
    Type: String
    Description: ACM certificate ID, required to enable HTTPS

Rules:
  SubnetsInVPC:
    Assertions:
    - Assert:
        Fn::EachMemberIn:
        - Fn::ValueOf:
          - Subnets
          - VpcId
        - 
          - !Ref VPC
      AssertDescription: All subnets must within the VPC
  
Conditions:
  ListenHTTPS: !Not [!Equals [!Ref CertId, "" ]]

Resources:
  SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub "${AWS::StackName} HTTP redirector ALB" 

  SGroupIngress80:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SecGroup
      CidrIp: !Ref AllowAccessCIDR
      Description: !Sub "Allow HTTP from ${AllowAccessCIDR}"
      FromPort: 80
      IpProtocol: TCP
      ToPort: 80

  SGroupIngress443:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SecGroup
      CidrIp: !Ref AllowAccessCIDR
      Description: !Sub "Allow HTTPS from ${AllowAccessCIDR}"
      FromPort: 443
      IpProtocol: TCP
      ToPort: 443

# NOTE: As ALB is exposed via Global Accelerator, ALB itself can be internal

  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: application
      Scheme: internal
      SecurityGroups:
        - !Ref SecGroup
      Subnets: !Ref Subnets
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: "text/plain"
          MessageBody: "200 OK"
          StatusCode: 200
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ListenHTTPS
    Properties:
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          ContentType: "text/plain"
          MessageBody: "200 OK"
          StatusCode: 200
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates: 
      - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}"

{% for type in ['Http', 'Https'] %}
 {% for item in redirects %}
  {{type}}ListenerRule{{item.Rule}}:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      ListenerArn: !Ref {{type}}Listener
      Priority: {{item.Rule}}
      Conditions:
        - Field: host-header
          Values:
            - {{item.Name}}
      Actions:
        - Type: redirect
          RedirectConfig:
            Host: {{item.Host}}
            Path: {{item.Path}}
            Port: {{item.Port}}
            Protocol: {{item.Protocol}}
            Query: "#{query}"
            StatusCode: HTTP_301
 {% endfor %}
{% endfor %}

  GA:
    Type: "AWS::GlobalAccelerator::Accelerator"
    Properties:
      Name: !Ref AWS::StackName
      IpAddressType: IPV4
      Enabled: true
  
  GAListener:
    Type: "AWS::GlobalAccelerator::Listener"
    Properties:
      AcceleratorArn: !Ref GA
      PortRanges:
        - FromPort: 80
          ToPort: 80
        - FromPort: 443
          ToPort: 443
      Protocol: TCP
      ClientAffinity: NONE
  
  GAEndPointGroup:
    Type: "AWS::GlobalAccelerator::EndpointGroup"
    Properties:
      ListenerArn: !Ref GAListener
      EndpointGroupRegion: !Ref AWS::Region
      EndpointConfigurations:
        - ClientIPPreservationEnabled: true
          EndpointId: !Ref ALB
          Weight: 100
      TrafficDialPercentage: 100
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      ThresholdCount: 3

Outputs:

  RedirectorDNS:
    Description: DNS name for redirector static IPs
    Value: !GetAtt GA.DnsName
